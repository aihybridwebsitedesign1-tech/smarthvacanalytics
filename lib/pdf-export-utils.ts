import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { format } from 'date-fns';
import { KpiData } from './kpi-calculations';

interface PDFExportOptions {
  companyName: string;
  dateRange: string;
  kpiData: KpiData;
  chartElements?: HTMLElement[];
}

export async function generatePDFReport(options: PDFExportOptions): Promise<jsPDF> {
  const { companyName, dateRange, kpiData, chartElements } = options;

  const pdf = new jsPDF({
    orientation: 'portrait',
    unit: 'mm',
    format: 'a4',
  });

  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  const margin = 20;
  const contentWidth = pageWidth - 2 * margin;

  const addWatermark = (pageNum: number, totalPages: number) => {
    pdf.setFontSize(8);
    pdf.setTextColor(180, 180, 180);
    pdf.setFont('helvetica', 'italic');
    pdf.text(
      'Generated by SmartHVACAnalytics',
      pageWidth / 2,
      pageHeight - 8,
      { align: 'center' }
    );

    pdf.setFontSize(8);
    pdf.setTextColor(100, 100, 100);
    pdf.text(
      `Page ${pageNum} of ${totalPages}`,
      pageWidth - margin,
      pageHeight - 8,
      { align: 'right' }
    );

    pdf.text(
      format(new Date(), 'MMM d, yyyy'),
      margin,
      pageHeight - 8
    );
  };

  let currentPage = 1;
  let yPosition = margin;

  pdf.setFillColor(37, 99, 235);
  pdf.rect(0, 0, pageWidth, 50, 'F');

  pdf.setTextColor(255, 255, 255);
  pdf.setFontSize(28);
  pdf.setFont('helvetica', 'bold');
  pdf.text('Performance Report', margin, yPosition + 15);

  pdf.setFontSize(12);
  pdf.setFont('helvetica', 'normal');
  pdf.text(companyName || 'SmartHVACAnalytics', margin, yPosition + 25);

  pdf.setFontSize(10);
  pdf.text(`Period: ${dateRange}`, margin, yPosition + 32);

  yPosition = 65;

  pdf.setFillColor(245, 245, 245);
  pdf.roundedRect(margin, yPosition, contentWidth, 15, 2, 2, 'F');

  pdf.setTextColor(60, 60, 60);
  pdf.setFontSize(10);
  pdf.setFont('helvetica', 'bold');
  pdf.text('EXECUTIVE SUMMARY', margin + 5, yPosition + 10);

  yPosition += 25;

  const kpiMetrics = [
    { label: 'Total Revenue', value: `$${kpiData.totalRevenue.toLocaleString(undefined, { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`, color: [34, 197, 94] },
    { label: 'Jobs Completed', value: kpiData.totalJobs.toString(), color: [59, 130, 246] },
    { label: 'Avg Hours/Job', value: `${kpiData.avgHours.toFixed(2)}h`, color: [168, 85, 247] },
    { label: 'Gross Margin', value: `${kpiData.grossMargin.toFixed(1)}%`, color: [249, 115, 22] },
    { label: 'Avg Job Revenue', value: `$${kpiData.avgJobRevenue.toFixed(2)}`, color: [34, 197, 94] },
    { label: 'First-Time Fix', value: `${kpiData.firstTimeFixRate.toFixed(1)}%`, color: [34, 197, 94] },
  ];

  const cardsPerRow = 2;
  const cardWidth = (contentWidth - 10) / cardsPerRow;
  const cardHeight = 28;

  for (let i = 0; i < kpiMetrics.length; i++) {
    const metric = kpiMetrics[i];
    const col = i % cardsPerRow;
    const row = Math.floor(i / cardsPerRow);

    const x = margin + col * (cardWidth + 10);
    const y = yPosition + row * (cardHeight + 8);

    if (y + cardHeight > pageHeight - 40) {
      addWatermark(currentPage, 1);
      pdf.addPage();
      currentPage++;
      yPosition = margin;
      continue;
    }

    pdf.setFillColor(255, 255, 255);
    pdf.roundedRect(x, y, cardWidth, cardHeight, 3, 3, 'F');

    pdf.setDrawColor(220, 220, 220);
    pdf.setLineWidth(0.5);
    pdf.roundedRect(x, y, cardWidth, cardHeight, 3, 3, 'S');

    pdf.setFontSize(9);
    pdf.setTextColor(120, 120, 120);
    pdf.setFont('helvetica', 'normal');
    pdf.text(metric.label, x + 5, y + 8);

    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.setTextColor(metric.color[0], metric.color[1], metric.color[2]);
    pdf.text(metric.value, x + 5, y + 20);
  }

  yPosition += Math.ceil(kpiMetrics.length / cardsPerRow) * (cardHeight + 8) + 15;

  if (chartElements && chartElements.length > 0) {
    for (let i = 0; i < chartElements.length; i++) {
      const chartElement = chartElements[i];

      if (yPosition > pageHeight - 120) {
        addWatermark(currentPage, 1);
        pdf.addPage();
        currentPage++;
        yPosition = margin + 10;
      }

      const chartTitle = chartElement.getAttribute('data-chart-title') || `Chart ${i + 1}`;

      pdf.setFillColor(245, 245, 245);
      pdf.roundedRect(margin, yPosition, contentWidth, 12, 2, 2, 'F');

      pdf.setTextColor(60, 60, 60);
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'bold');
      pdf.text(chartTitle, margin + 5, yPosition + 8);

      yPosition += 18;

      try {
        const canvas = await html2canvas(chartElement, {
          scale: 2,
          backgroundColor: '#ffffff',
          logging: false,
          windowWidth: chartElement.scrollWidth,
          windowHeight: chartElement.scrollHeight,
        });

        const imgData = canvas.toDataURL('image/png');
        const imgWidth = contentWidth;
        const imgHeight = Math.min((canvas.height * imgWidth) / canvas.width, 110);

        pdf.addImage(imgData, 'PNG', margin, yPosition, imgWidth, imgHeight, undefined, 'FAST');
        yPosition += imgHeight + 20;

        if (i < chartElements.length - 1 && i % 2 === 1) {
          addWatermark(currentPage, 1);
          pdf.addPage();
          currentPage++;
          yPosition = margin + 10;
        }
      } catch (error) {
        console.error('Error capturing chart:', error);
      }
    }
  }

  const totalPages = pdf.getNumberOfPages();
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i);
    addWatermark(i, totalPages);
  }

  return pdf;
}

export async function downloadPDFReport(options: PDFExportOptions, filename: string): Promise<void> {
  const pdf = await generatePDFReport(options);
  pdf.save(filename);
}
