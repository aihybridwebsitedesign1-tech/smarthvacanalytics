import Stripe from 'stripe';
import { createClient } from '@supabase/supabase-js';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {
  apiVersion: '2025-09-30.clover',
});

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

async function endTrialForUser(email: string) {
  console.log(`\n🔍 Looking up user: ${email}`);

  const { data: profile, error: profileError } = await supabase
    .from('profiles')
    .select('*')
    .eq('email', email)
    .single();

  if (profileError || !profile) {
    console.error('❌ User not found');
    return;
  }

  console.log('✅ User found:', {
    id: profile.id,
    email: profile.email,
    company_name: profile.company_name,
    plan_tier: profile.plan_tier,
    billing_status: profile.billing_status,
    subscription_id: profile.subscription_id,
  });

  if (!profile.stripe_customer_id || !profile.subscription_id) {
    console.log('\n⚠️  User does not have a Stripe subscription yet.');
    console.log('Creating a test subscription with trial...\n');

    let customer;
    if (profile.stripe_customer_id) {
      customer = await stripe.customers.retrieve(profile.stripe_customer_id);
      console.log('✅ Found existing Stripe customer:', customer.id);
    } else {
      customer = await stripe.customers.create({
        email: profile.email,
        name: profile.company_name || undefined,
        metadata: {
          userId: profile.id,
        },
      });
      console.log('✅ Created Stripe customer:', customer.id);

      await supabase
        .from('profiles')
        .update({ stripe_customer_id: customer.id })
        .eq('id', profile.id);
    }

    const priceId = profile.plan_tier === 'starter'
      ? process.env.NEXT_PUBLIC_STRIPE_STARTER_PRICE_ID
      : profile.plan_tier === 'growth'
      ? process.env.NEXT_PUBLIC_STRIPE_GROWTH_PRICE_ID
      : process.env.NEXT_PUBLIC_STRIPE_PRO_PRICE_ID;

    console.log(`Creating subscription with price ID: ${priceId}`);

    const subscription = await stripe.subscriptions.create({
      customer: customer.id,
      items: [{ price: priceId }],
      trial_period_days: 14,
      metadata: {
        userId: profile.id,
      },
    });

    console.log('✅ Created subscription:', subscription.id);
    console.log('   Status:', subscription.status);
    console.log('   Trial end:', new Date(subscription.trial_end! * 1000).toISOString());

    const trialEnd = new Date(subscription.trial_end! * 1000);
    const subscriptionEnd = new Date(subscription.current_period_end * 1000);

    await supabase
      .from('profiles')
      .update({
        subscription_id: subscription.id,
        billing_status: 'trialing',
        subscription_start: new Date().toISOString(),
        subscription_end: trialEnd.toISOString(),
      })
      .eq('id', profile.id);

    console.log('✅ Updated database with subscription details\n');

    profile.subscription_id = subscription.id;
    profile.stripe_customer_id = customer.id;
  }

  console.log('\n⏱️  Ending trial immediately...\n');

  const subscription = await stripe.subscriptions.update(profile.subscription_id, {
    trial_end: 'now',
  });

  console.log('✅ Trial ended successfully');
  console.log('   Subscription ID:', subscription.id);
  console.log('   Status:', subscription.status);
  console.log('   Current period end:', new Date(subscription.current_period_end * 1000).toISOString());

  console.log('\n⏳ Waiting for webhook to process...');
  await new Promise(resolve => setTimeout(resolve, 3000));

  const { data: updatedProfile } = await supabase
    .from('profiles')
    .select('*')
    .eq('email', email)
    .single();

  console.log('\n📊 Updated profile:');
  console.log('   Billing Status:', updatedProfile?.billing_status);
  console.log('   Subscription Start:', updatedProfile?.subscription_start);
  console.log('   Subscription End:', updatedProfile?.subscription_end);

  console.log('\n✅ Trial expiration test complete!');
  console.log('\n📋 Next Steps:');
  console.log('   1. Check webhook logs for invoice.payment_succeeded');
  console.log('   2. Login as testv7@gmail.com');
  console.log('   3. Verify UI shows "Active Subscription" instead of trial banner');
  console.log('   4. Check Settings page for subscription details');
}

const email = process.argv[2] || 'testv7@gmail.com';
endTrialForUser(email).catch(console.error);
